#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Jul 25 21:48:32 2022 by generateDS.py version 2.40.13.
# Python 3.8.10 (default, Jun 22 2022, 20:18:18)  [GCC 9.4.0]
#
# Command line options:
#   ('-o', 'mazeCom.py')
#
# Command line arguments:
#   mazeCom.xsd
#
# Command line:
#   /home/ayoub/.local/bin/generateDS.py -o "mazeCom.py" mazeCom.xsd
#
# Current working directory (os.getcwd()):
#   Praxisprojekt
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            try:
                return '%d' % int(input_data)
            except:
                return input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % float(input_data)).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ClientRole(str, Enum):
    PLAYER='PLAYER'
    MANAGER='MANAGER'
    SPECTATOR='SPECTATOR'


class Errortype(str, Enum):
    NOERROR='NOERROR'
    ERROR='ERROR'
    AWAIT_LOGIN='AWAIT_LOGIN'
    AWAIT_MOVE='AWAIT_MOVE'
    ILLEGAL_MOVE='ILLEGAL_MOVE'
    TIMEOUT='TIMEOUT'
    TOO_MANY_TRIES='TOO_MANY_TRIES'


class MazeComMessagetype(str, Enum):
    LOGIN='LOGIN'
    LOGINREPLY='LOGINREPLY'
    AWAITMOVE='AWAITMOVE'
    MOVE='MOVE'
    MOVEINFO='MOVEINFO'
    GAMESTATUS='GAMESTATUS'
    CONTROLSERVER='CONTROLSERVER'
    ACCEPT='ACCEPT'
    WIN='WIN'
    DISCONNECT='DISCONNECT'


class Treasure(str, Enum):
    START_01='Start01'
    START_02='Start02'
    START_03='Start03'
    START_04='Start04'
    SYM_01='sym01'
    SYM_02='sym02'
    SYM_03='sym03'
    SYM_04='sym04'
    SYM_05='sym05'
    SYM_06='sym06'
    SYM_07='sym07'
    SYM_08='sym08'
    SYM_09='sym09'
    SYM_10='sym10'
    SYM_11='sym11'
    SYM_12='sym12'
    SYM_13='sym13'
    SYM_14='sym14'
    SYM_15='sym15'
    SYM_16='sym16'
    SYM_17='sym17'
    SYM_18='sym18'
    SYM_19='sym19'
    SYM_20='sym20'
    SYM_21='sym21'
    SYM_22='sym22'
    SYM_23='sym23'
    SYM_24='sym24'


class commandType(str, Enum):
    START='START'
    STOP='STOP'


class CardData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, openings=None, pin=None, treasure=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.openings = openings
        self.openings_nsprefix_ = None
        self.pin = pin
        self.pin_nsprefix_ = None
        self.treasure = treasure
        self.validate_Treasure(self.treasure)
        self.treasure_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CardData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CardData.subclass:
            return CardData.subclass(*args_, **kwargs_)
        else:
            return CardData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_openings(self):
        return self.openings
    def set_openings(self, openings):
        self.openings = openings
    def get_pin(self):
        return self.pin
    def set_pin(self, pin):
        self.pin = pin
    def get_treasure(self):
        return self.treasure
    def set_treasure(self, treasure):
        self.treasure = treasure
    def validate_Treasure(self, value):
        result = True
        # Validate type Treasure, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['Start01', 'Start02', 'Start03', 'Start04', 'sym01', 'sym02', 'sym03', 'sym04', 'sym05', 'sym06', 'sym07', 'sym08', 'sym09', 'sym10', 'sym11', 'sym12', 'sym13', 'sym14', 'sym15', 'sym16', 'sym17', 'sym18', 'sym19', 'sym20', 'sym21', 'sym22', 'sym23', 'sym24']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Treasure' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.openings is not None or
            self.pin is not None or
            self.treasure is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CardData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CardData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CardData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CardData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CardData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CardData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CardData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.openings is not None:
            namespaceprefix_ = self.openings_nsprefix_ + ':' if (UseCapturedNS_ and self.openings_nsprefix_) else ''
            self.openings.export(outfile, level, namespaceprefix_, namespacedef_='', name_='openings', pretty_print=pretty_print)
        if self.pin is not None:
            namespaceprefix_ = self.pin_nsprefix_ + ':' if (UseCapturedNS_ and self.pin_nsprefix_) else ''
            self.pin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='pin', pretty_print=pretty_print)
        if self.treasure is not None:
            namespaceprefix_ = self.treasure_nsprefix_ + ':' if (UseCapturedNS_ and self.treasure_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%streasure>%s</%streasure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.treasure), input_name='treasure')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'openings':
            obj_ = Openings.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.openings = obj_
            obj_.original_tagname_ = 'openings'
        elif nodeName_ == 'pin':
            obj_ = Pin.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.pin = obj_
            obj_.original_tagname_ = 'pin'
        elif nodeName_ == 'treasure':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'treasure')
            value_ = self.gds_validate_string(value_, node, 'treasure')
            self.treasure = value_
            self.treasure_nsprefix_ = child_.prefix
            # validate type Treasure
            self.validate_Treasure(self.treasure)
# end class CardData


class BoardData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, row=None, shiftCard=None, forbidden=None, foundTreasures=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if row is None:
            self.row = []
        else:
            self.row = row
        self.row_nsprefix_ = None
        self.shiftCard = shiftCard
        self.shiftCard_nsprefix_ = None
        self.forbidden = forbidden
        self.forbidden_nsprefix_ = None
        if foundTreasures is None:
            self.foundTreasures = []
        else:
            self.foundTreasures = foundTreasures
        self.foundTreasures_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BoardData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BoardData.subclass:
            return BoardData.subclass(*args_, **kwargs_)
        else:
            return BoardData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_row(self):
        if (self.row == None):
            self.row = []
        return self.row
    def set_row(self, row):
        self.row = row
    def add_row(self, value):
        self.row.append(value)
    def insert_row_at(self, index, value):
        self.row.insert(index, value)
    def replace_row_at(self, index, value):
        self.row[index] = value
    def get_shiftCard(self):
        return self.shiftCard
    def set_shiftCard(self, shiftCard):
        self.shiftCard = shiftCard
    def get_forbidden(self):
        return self.forbidden
    def set_forbidden(self, forbidden):
        self.forbidden = forbidden
    def get_foundTreasures(self):
        return self.foundTreasures
    def set_foundTreasures(self, foundTreasures):
        self.foundTreasures = foundTreasures
    def add_foundTreasures(self, value):
        self.foundTreasures.append(value)
    def insert_foundTreasures_at(self, index, value):
        self.foundTreasures.insert(index, value)
    def replace_foundTreasures_at(self, index, value):
        self.foundTreasures[index] = value
    def validate_Treasure(self, value):
        result = True
        # Validate type Treasure, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['Start01', 'Start02', 'Start03', 'Start04', 'sym01', 'sym02', 'sym03', 'sym04', 'sym05', 'sym06', 'sym07', 'sym08', 'sym09', 'sym10', 'sym11', 'sym12', 'sym13', 'sym14', 'sym15', 'sym16', 'sym17', 'sym18', 'sym19', 'sym20', 'sym21', 'sym22', 'sym23', 'sym24']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Treasure' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.row or
            self.shiftCard is not None or
            self.forbidden is not None or
            self.foundTreasures
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BoardData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BoardData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BoardData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BoardData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BoardData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BoardData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BoardData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for row_ in self.row:
            namespaceprefix_ = self.row_nsprefix_ + ':' if (UseCapturedNS_ and self.row_nsprefix_) else ''
            row_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='row', pretty_print=pretty_print)
        if self.shiftCard is not None:
            namespaceprefix_ = self.shiftCard_nsprefix_ + ':' if (UseCapturedNS_ and self.shiftCard_nsprefix_) else ''
            self.shiftCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shiftCard', pretty_print=pretty_print)
        if self.forbidden is not None:
            namespaceprefix_ = self.forbidden_nsprefix_ + ':' if (UseCapturedNS_ and self.forbidden_nsprefix_) else ''
            self.forbidden.export(outfile, level, namespaceprefix_, namespacedef_='', name_='forbidden', pretty_print=pretty_print)
        for foundTreasures_ in self.foundTreasures:
            namespaceprefix_ = self.foundTreasures_nsprefix_ + ':' if (UseCapturedNS_ and self.foundTreasures_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfoundTreasures>%s</%sfoundTreasures>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(foundTreasures_), input_name='foundTreasures')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'row':
            obj_ = Row.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.row.append(obj_)
            obj_.original_tagname_ = 'row'
        elif nodeName_ == 'shiftCard':
            obj_ = CardData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shiftCard = obj_
            obj_.original_tagname_ = 'shiftCard'
        elif nodeName_ == 'forbidden':
            obj_ = PositionData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.forbidden = obj_
            obj_.original_tagname_ = 'forbidden'
        elif nodeName_ == 'foundTreasures':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'foundTreasures')
            value_ = self.gds_validate_string(value_, node, 'foundTreasures')
            self.foundTreasures.append(value_)
            self.foundTreasures_nsprefix_ = child_.prefix
            # validate type Treasure
            self.validate_Treasure(self.foundTreasures[-1])
# end class BoardData


class PositionData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, row=None, col=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.row = row
        self.row_nsprefix_ = None
        self.col = col
        self.col_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionData.subclass:
            return PositionData.subclass(*args_, **kwargs_)
        else:
            return PositionData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_row(self):
        return self.row
    def set_row(self, row):
        self.row = row
    def get_col(self):
        return self.col
    def set_col(self, col):
        self.col = col
    def _hasContent(self):
        if (
            self.row is not None or
            self.col is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PositionData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PositionData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PositionData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.row is not None:
            namespaceprefix_ = self.row_nsprefix_ + ':' if (UseCapturedNS_ and self.row_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srow>%s</%srow>%s' % (namespaceprefix_ , self.gds_format_integer(self.row, input_name='row'), namespaceprefix_ , eol_))
        if self.col is not None:
            namespaceprefix_ = self.col_nsprefix_ + ':' if (UseCapturedNS_ and self.col_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scol>%s</%scol>%s' % (namespaceprefix_ , self.gds_format_integer(self.col, input_name='col'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'row' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'row')
            ival_ = self.gds_validate_integer(ival_, node, 'row')
            self.row = ival_
            self.row_nsprefix_ = child_.prefix
        elif nodeName_ == 'col' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'col')
            ival_ = self.gds_validate_integer(ival_, node, 'col')
            self.col = ival_
            self.col_nsprefix_ = child_.prefix
# end class PositionData


class StatisticData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, foundTreasures=None, movesDone=None, longestFailMoves=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.foundTreasures = foundTreasures
        self.foundTreasures_nsprefix_ = None
        self.movesDone = movesDone
        self.movesDone_nsprefix_ = None
        self.longestFailMoves = longestFailMoves
        self.longestFailMoves_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatisticData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatisticData.subclass:
            return StatisticData.subclass(*args_, **kwargs_)
        else:
            return StatisticData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_foundTreasures(self):
        return self.foundTreasures
    def set_foundTreasures(self, foundTreasures):
        self.foundTreasures = foundTreasures
    def get_movesDone(self):
        return self.movesDone
    def set_movesDone(self, movesDone):
        self.movesDone = movesDone
    def get_longestFailMoves(self):
        return self.longestFailMoves
    def set_longestFailMoves(self, longestFailMoves):
        self.longestFailMoves = longestFailMoves
    def _hasContent(self):
        if (
            self.foundTreasures is not None or
            self.movesDone is not None or
            self.longestFailMoves is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StatisticData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StatisticData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StatisticData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StatisticData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StatisticData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StatisticData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StatisticData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.foundTreasures is not None:
            namespaceprefix_ = self.foundTreasures_nsprefix_ + ':' if (UseCapturedNS_ and self.foundTreasures_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfoundTreasures>%s</%sfoundTreasures>%s' % (namespaceprefix_ , self.gds_format_integer(self.foundTreasures, input_name='foundTreasures'), namespaceprefix_ , eol_))
        if self.movesDone is not None:
            namespaceprefix_ = self.movesDone_nsprefix_ + ':' if (UseCapturedNS_ and self.movesDone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smovesDone>%s</%smovesDone>%s' % (namespaceprefix_ , self.gds_format_integer(self.movesDone, input_name='movesDone'), namespaceprefix_ , eol_))
        if self.longestFailMoves is not None:
            namespaceprefix_ = self.longestFailMoves_nsprefix_ + ':' if (UseCapturedNS_ and self.longestFailMoves_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slongestFailMoves>%s</%slongestFailMoves>%s' % (namespaceprefix_ , self.gds_format_integer(self.longestFailMoves, input_name='longestFailMoves'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'foundTreasures' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'foundTreasures')
            ival_ = self.gds_validate_integer(ival_, node, 'foundTreasures')
            self.foundTreasures = ival_
            self.foundTreasures_nsprefix_ = child_.prefix
        elif nodeName_ == 'movesDone' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'movesDone')
            ival_ = self.gds_validate_integer(ival_, node, 'movesDone')
            self.movesDone = ival_
            self.movesDone_nsprefix_ = child_.prefix
        elif nodeName_ == 'longestFailMoves' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'longestFailMoves')
            ival_ = self.gds_validate_integer(ival_, node, 'longestFailMoves')
            self.longestFailMoves = ival_
            self.longestFailMoves_nsprefix_ = child_.prefix
# end class StatisticData


class MazeCom(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, messagetype=None, id=None, LoginMessage=None, LoginReplyMessage=None, AwaitMoveMessage=None, MoveMessage=None, MoveInfoMessage=None, GameStatusMessage=None, ControlServerMessage=None, AcceptMessage=None, WinMessage=None, DisconnectMessage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.messagetype = _cast(None, messagetype)
        self.messagetype_nsprefix_ = None
        self.id = _cast(int, id)
        self.id_nsprefix_ = None
        self.LoginMessage = LoginMessage
        self.LoginMessage_nsprefix_ = None
        self.LoginReplyMessage = LoginReplyMessage
        self.LoginReplyMessage_nsprefix_ = None
        self.AwaitMoveMessage = AwaitMoveMessage
        self.AwaitMoveMessage_nsprefix_ = None
        self.MoveMessage = MoveMessage
        self.MoveMessage_nsprefix_ = None
        self.MoveInfoMessage = MoveInfoMessage
        self.MoveInfoMessage_nsprefix_ = None
        self.GameStatusMessage = GameStatusMessage
        self.GameStatusMessage_nsprefix_ = None
        self.ControlServerMessage = ControlServerMessage
        self.ControlServerMessage_nsprefix_ = None
        self.AcceptMessage = AcceptMessage
        self.AcceptMessage_nsprefix_ = None
        self.WinMessage = WinMessage
        self.WinMessage_nsprefix_ = None
        self.DisconnectMessage = DisconnectMessage
        self.DisconnectMessage_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MazeCom)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MazeCom.subclass:
            return MazeCom.subclass(*args_, **kwargs_)
        else:
            return MazeCom(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LoginMessage(self):
        return self.LoginMessage
    def set_LoginMessage(self, LoginMessage):
        self.LoginMessage = LoginMessage
    def get_LoginReplyMessage(self):
        return self.LoginReplyMessage
    def set_LoginReplyMessage(self, LoginReplyMessage):
        self.LoginReplyMessage = LoginReplyMessage
    def get_AwaitMoveMessage(self):
        return self.AwaitMoveMessage
    def set_AwaitMoveMessage(self, AwaitMoveMessage):
        self.AwaitMoveMessage = AwaitMoveMessage
    def get_MoveMessage(self):
        return self.MoveMessage
    def set_MoveMessage(self, MoveMessage):
        self.MoveMessage = MoveMessage
    def get_MoveInfoMessage(self):
        return self.MoveInfoMessage
    def set_MoveInfoMessage(self, MoveInfoMessage):
        self.MoveInfoMessage = MoveInfoMessage
    def get_GameStatusMessage(self):
        return self.GameStatusMessage
    def set_GameStatusMessage(self, GameStatusMessage):
        self.GameStatusMessage = GameStatusMessage
    def get_ControlServerMessage(self):
        return self.ControlServerMessage
    def set_ControlServerMessage(self, ControlServerMessage):
        self.ControlServerMessage = ControlServerMessage
    def get_AcceptMessage(self):
        return self.AcceptMessage
    def set_AcceptMessage(self, AcceptMessage):
        self.AcceptMessage = AcceptMessage
    def get_WinMessage(self):
        return self.WinMessage
    def set_WinMessage(self, WinMessage):
        self.WinMessage = WinMessage
    def get_DisconnectMessage(self):
        return self.DisconnectMessage
    def set_DisconnectMessage(self, DisconnectMessage):
        self.DisconnectMessage = DisconnectMessage
    def get_messagetype(self):
        return self.messagetype
    def set_messagetype(self, messagetype):
        self.messagetype = messagetype
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def validate_MazeComMessagetype(self, value):
        # Validate type MazeComMessagetype, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LOGIN', 'LOGINREPLY', 'AWAITMOVE', 'MOVE', 'MOVEINFO', 'GAMESTATUS', 'CONTROLSERVER', 'ACCEPT', 'WIN', 'DISCONNECT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on MazeComMessagetype' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def _hasContent(self):
        if (
            self.LoginMessage is not None or
            self.LoginReplyMessage is not None or
            self.AwaitMoveMessage is not None or
            self.MoveMessage is not None or
            self.MoveInfoMessage is not None or
            self.GameStatusMessage is not None or
            self.ControlServerMessage is not None or
            self.AcceptMessage is not None or
            self.WinMessage is not None or
            self.DisconnectMessage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MazeCom', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MazeCom')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MazeCom':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MazeCom')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MazeCom', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MazeCom'):
        if self.messagetype is not None and 'messagetype' not in already_processed:
            already_processed.add('messagetype')
            outfile.write(' messagetype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.messagetype), input_name='messagetype')), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MazeCom', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LoginMessage is not None:
            namespaceprefix_ = self.LoginMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.LoginMessage_nsprefix_) else ''
            self.LoginMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LoginMessage', pretty_print=pretty_print)
        if self.LoginReplyMessage is not None:
            namespaceprefix_ = self.LoginReplyMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.LoginReplyMessage_nsprefix_) else ''
            self.LoginReplyMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LoginReplyMessage', pretty_print=pretty_print)
        if self.AwaitMoveMessage is not None:
            namespaceprefix_ = self.AwaitMoveMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.AwaitMoveMessage_nsprefix_) else ''
            self.AwaitMoveMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AwaitMoveMessage', pretty_print=pretty_print)
        if self.MoveMessage is not None:
            namespaceprefix_ = self.MoveMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.MoveMessage_nsprefix_) else ''
            self.MoveMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MoveMessage', pretty_print=pretty_print)
        if self.MoveInfoMessage is not None:
            namespaceprefix_ = self.MoveInfoMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.MoveInfoMessage_nsprefix_) else ''
            self.MoveInfoMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MoveInfoMessage', pretty_print=pretty_print)
        if self.GameStatusMessage is not None:
            namespaceprefix_ = self.GameStatusMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.GameStatusMessage_nsprefix_) else ''
            self.GameStatusMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GameStatusMessage', pretty_print=pretty_print)
        if self.ControlServerMessage is not None:
            namespaceprefix_ = self.ControlServerMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.ControlServerMessage_nsprefix_) else ''
            self.ControlServerMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ControlServerMessage', pretty_print=pretty_print)
        if self.AcceptMessage is not None:
            namespaceprefix_ = self.AcceptMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.AcceptMessage_nsprefix_) else ''
            self.AcceptMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AcceptMessage', pretty_print=pretty_print)
        if self.WinMessage is not None:
            namespaceprefix_ = self.WinMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.WinMessage_nsprefix_) else ''
            self.WinMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WinMessage', pretty_print=pretty_print)
        if self.DisconnectMessage is not None:
            namespaceprefix_ = self.DisconnectMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.DisconnectMessage_nsprefix_) else ''
            self.DisconnectMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DisconnectMessage', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('messagetype', node)
        if value is not None and 'messagetype' not in already_processed:
            already_processed.add('messagetype')
            self.messagetype = value
            self.validate_MazeComMessagetype(self.messagetype)    # validate type MazeComMessagetype
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = self.gds_parse_integer(value, node, 'id')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LoginMessage':
            obj_ = LoginMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LoginMessage = obj_
            obj_.original_tagname_ = 'LoginMessage'
        elif nodeName_ == 'LoginReplyMessage':
            obj_ = LoginReplyMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LoginReplyMessage = obj_
            obj_.original_tagname_ = 'LoginReplyMessage'
        elif nodeName_ == 'AwaitMoveMessage':
            obj_ = AwaitMoveMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AwaitMoveMessage = obj_
            obj_.original_tagname_ = 'AwaitMoveMessage'
        elif nodeName_ == 'MoveMessage':
            obj_ = MoveMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MoveMessage = obj_
            obj_.original_tagname_ = 'MoveMessage'
        elif nodeName_ == 'MoveInfoMessage':
            obj_ = MoveInfoData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MoveInfoMessage = obj_
            obj_.original_tagname_ = 'MoveInfoMessage'
        elif nodeName_ == 'GameStatusMessage':
            obj_ = GameStatusData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GameStatusMessage = obj_
            obj_.original_tagname_ = 'GameStatusMessage'
        elif nodeName_ == 'ControlServerMessage':
            obj_ = ControlServerData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ControlServerMessage = obj_
            obj_.original_tagname_ = 'ControlServerMessage'
        elif nodeName_ == 'AcceptMessage':
            obj_ = AcceptMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AcceptMessage = obj_
            obj_.original_tagname_ = 'AcceptMessage'
        elif nodeName_ == 'WinMessage':
            obj_ = WinMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WinMessage = obj_
            obj_.original_tagname_ = 'WinMessage'
        elif nodeName_ == 'DisconnectMessage':
            obj_ = DisconnectMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DisconnectMessage = obj_
            obj_.original_tagname_ = 'DisconnectMessage'
# end class MazeCom


class LoginMessageData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, role='PLAYER', gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = name
        self.name_nsprefix_ = None
        self.role = role
        self.validate_ClientRole(self.role)
        self.role_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LoginMessageData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LoginMessageData.subclass:
            return LoginMessageData.subclass(*args_, **kwargs_)
        else:
            return LoginMessageData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_role(self):
        return self.role
    def set_role(self, role):
        self.role = role
    def validate_ClientRole(self, value):
        result = True
        # Validate type ClientRole, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PLAYER', 'MANAGER', 'SPECTATOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ClientRole' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.name is not None or
            self.role != "PLAYER"
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LoginMessageData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LoginMessageData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LoginMessageData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LoginMessageData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LoginMessageData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LoginMessageData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LoginMessageData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            namespaceprefix_ = self.name_nsprefix_ + ':' if (UseCapturedNS_ and self.name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.role != "PLAYER":
            namespaceprefix_ = self.role_nsprefix_ + ':' if (UseCapturedNS_ and self.role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srole>%s</%srole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.role), input_name='role')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'name')
            value_ = self.gds_validate_string(value_, node, 'name')
            self.name = value_
            self.name_nsprefix_ = child_.prefix
        elif nodeName_ == 'role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'role')
            value_ = self.gds_validate_string(value_, node, 'role')
            self.role = value_
            self.role_nsprefix_ = child_.prefix
            # validate type ClientRole
            self.validate_ClientRole(self.role)
# end class LoginMessageData


class LoginReplyMessageData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, newID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.newID = newID
        self.newID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LoginReplyMessageData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LoginReplyMessageData.subclass:
            return LoginReplyMessageData.subclass(*args_, **kwargs_)
        else:
            return LoginReplyMessageData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_newID(self):
        return self.newID
    def set_newID(self, newID):
        self.newID = newID
    def _hasContent(self):
        if (
            self.newID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LoginReplyMessageData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LoginReplyMessageData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LoginReplyMessageData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LoginReplyMessageData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LoginReplyMessageData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LoginReplyMessageData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LoginReplyMessageData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.newID is not None:
            namespaceprefix_ = self.newID_nsprefix_ + ':' if (UseCapturedNS_ and self.newID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snewID>%s</%snewID>%s' % (namespaceprefix_ , self.gds_format_integer(self.newID, input_name='newID'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'newID' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'newID')
            ival_ = self.gds_validate_integer(ival_, node, 'newID')
            self.newID = ival_
            self.newID_nsprefix_ = child_.prefix
# end class LoginReplyMessageData


class AwaitMoveMessageData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, board=None, treasuresToGo=None, treasureToFindNext=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.board = board
        self.board_nsprefix_ = None
        if treasuresToGo is None:
            self.treasuresToGo = []
        else:
            self.treasuresToGo = treasuresToGo
        self.treasuresToGo_nsprefix_ = None
        self.treasureToFindNext = treasureToFindNext
        self.validate_Treasure(self.treasureToFindNext)
        self.treasureToFindNext_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AwaitMoveMessageData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AwaitMoveMessageData.subclass:
            return AwaitMoveMessageData.subclass(*args_, **kwargs_)
        else:
            return AwaitMoveMessageData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_board(self):
        return self.board
    def set_board(self, board):
        self.board = board
    def get_treasuresToGo(self):
        return self.treasuresToGo
    def set_treasuresToGo(self, treasuresToGo):
        self.treasuresToGo = treasuresToGo
    def add_treasuresToGo(self, value):
        self.treasuresToGo.append(value)
    def insert_treasuresToGo_at(self, index, value):
        self.treasuresToGo.insert(index, value)
    def replace_treasuresToGo_at(self, index, value):
        self.treasuresToGo[index] = value
    def get_treasureToFindNext(self):
        return self.treasureToFindNext
    def set_treasureToFindNext(self, treasureToFindNext):
        self.treasureToFindNext = treasureToFindNext
    def validate_Treasure(self, value):
        result = True
        # Validate type Treasure, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['Start01', 'Start02', 'Start03', 'Start04', 'sym01', 'sym02', 'sym03', 'sym04', 'sym05', 'sym06', 'sym07', 'sym08', 'sym09', 'sym10', 'sym11', 'sym12', 'sym13', 'sym14', 'sym15', 'sym16', 'sym17', 'sym18', 'sym19', 'sym20', 'sym21', 'sym22', 'sym23', 'sym24']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Treasure' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.board is not None or
            self.treasuresToGo or
            self.treasureToFindNext is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AwaitMoveMessageData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AwaitMoveMessageData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AwaitMoveMessageData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AwaitMoveMessageData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AwaitMoveMessageData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AwaitMoveMessageData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AwaitMoveMessageData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.board is not None:
            namespaceprefix_ = self.board_nsprefix_ + ':' if (UseCapturedNS_ and self.board_nsprefix_) else ''
            self.board.export(outfile, level, namespaceprefix_, namespacedef_='', name_='board', pretty_print=pretty_print)
        for treasuresToGo_ in self.treasuresToGo:
            namespaceprefix_ = self.treasuresToGo_nsprefix_ + ':' if (UseCapturedNS_ and self.treasuresToGo_nsprefix_) else ''
            treasuresToGo_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='treasuresToGo', pretty_print=pretty_print)
        if self.treasureToFindNext is not None:
            namespaceprefix_ = self.treasureToFindNext_nsprefix_ + ':' if (UseCapturedNS_ and self.treasureToFindNext_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%streasureToFindNext>%s</%streasureToFindNext>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.treasureToFindNext), input_name='treasureToFindNext')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'board':
            obj_ = BoardData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.board = obj_
            obj_.original_tagname_ = 'board'
        elif nodeName_ == 'treasuresToGo':
            obj_ = TreasuresToGoData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.treasuresToGo.append(obj_)
            obj_.original_tagname_ = 'treasuresToGo'
        elif nodeName_ == 'treasureToFindNext':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'treasureToFindNext')
            value_ = self.gds_validate_string(value_, node, 'treasureToFindNext')
            self.treasureToFindNext = value_
            self.treasureToFindNext_nsprefix_ = child_.prefix
            # validate type Treasure
            self.validate_Treasure(self.treasureToFindNext)
# end class AwaitMoveMessageData


class TreasuresToGoData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, player=None, treasures=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.player = player
        self.player_nsprefix_ = None
        self.treasures = treasures
        self.treasures_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TreasuresToGoData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TreasuresToGoData.subclass:
            return TreasuresToGoData.subclass(*args_, **kwargs_)
        else:
            return TreasuresToGoData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_player(self):
        return self.player
    def set_player(self, player):
        self.player = player
    def get_treasures(self):
        return self.treasures
    def set_treasures(self, treasures):
        self.treasures = treasures
    def _hasContent(self):
        if (
            self.player is not None or
            self.treasures is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TreasuresToGoData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TreasuresToGoData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TreasuresToGoData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TreasuresToGoData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TreasuresToGoData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TreasuresToGoData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TreasuresToGoData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.player is not None:
            namespaceprefix_ = self.player_nsprefix_ + ':' if (UseCapturedNS_ and self.player_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splayer>%s</%splayer>%s' % (namespaceprefix_ , self.gds_format_integer(self.player, input_name='player'), namespaceprefix_ , eol_))
        if self.treasures is not None:
            namespaceprefix_ = self.treasures_nsprefix_ + ':' if (UseCapturedNS_ and self.treasures_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%streasures>%s</%streasures>%s' % (namespaceprefix_ , self.gds_format_integer(self.treasures, input_name='treasures'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'player' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'player')
            ival_ = self.gds_validate_integer(ival_, node, 'player')
            self.player = ival_
            self.player_nsprefix_ = child_.prefix
        elif nodeName_ == 'treasures' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'treasures')
            ival_ = self.gds_validate_integer(ival_, node, 'treasures')
            self.treasures = ival_
            self.treasures_nsprefix_ = child_.prefix
# end class TreasuresToGoData


class MoveMessageData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, shiftPosition=None, newPinPos=None, shiftCard=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.shiftPosition = shiftPosition
        self.shiftPosition_nsprefix_ = None
        self.newPinPos = newPinPos
        self.newPinPos_nsprefix_ = None
        self.shiftCard = shiftCard
        self.shiftCard_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MoveMessageData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MoveMessageData.subclass:
            return MoveMessageData.subclass(*args_, **kwargs_)
        else:
            return MoveMessageData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_shiftPosition(self):
        return self.shiftPosition
    def set_shiftPosition(self, shiftPosition):
        self.shiftPosition = shiftPosition
    def get_newPinPos(self):
        return self.newPinPos
    def set_newPinPos(self, newPinPos):
        self.newPinPos = newPinPos
    def get_shiftCard(self):
        return self.shiftCard
    def set_shiftCard(self, shiftCard):
        self.shiftCard = shiftCard
    def _hasContent(self):
        if (
            self.shiftPosition is not None or
            self.newPinPos is not None or
            self.shiftCard is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MoveMessageData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MoveMessageData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MoveMessageData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MoveMessageData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MoveMessageData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MoveMessageData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MoveMessageData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.shiftPosition is not None:
            namespaceprefix_ = self.shiftPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.shiftPosition_nsprefix_) else ''
            self.shiftPosition.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shiftPosition', pretty_print=pretty_print)
        if self.newPinPos is not None:
            namespaceprefix_ = self.newPinPos_nsprefix_ + ':' if (UseCapturedNS_ and self.newPinPos_nsprefix_) else ''
            self.newPinPos.export(outfile, level, namespaceprefix_, namespacedef_='', name_='newPinPos', pretty_print=pretty_print)
        if self.shiftCard is not None:
            namespaceprefix_ = self.shiftCard_nsprefix_ + ':' if (UseCapturedNS_ and self.shiftCard_nsprefix_) else ''
            self.shiftCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shiftCard', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'shiftPosition':
            obj_ = PositionData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shiftPosition = obj_
            obj_.original_tagname_ = 'shiftPosition'
        elif nodeName_ == 'newPinPos':
            obj_ = PositionData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.newPinPos = obj_
            obj_.original_tagname_ = 'newPinPos'
        elif nodeName_ == 'shiftCard':
            obj_ = CardData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shiftCard = obj_
            obj_.original_tagname_ = 'shiftCard'
# end class MoveMessageData


class GameStatusData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, playerId=None, boardAfterMove=None, treasureReached=None, sendMove=None, playerStatus=None, foundTreasures=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.playerId = _cast(int, playerId)
        self.playerId_nsprefix_ = None
        self.boardAfterMove = boardAfterMove
        self.boardAfterMove_nsprefix_ = None
        self.treasureReached = treasureReached
        self.treasureReached_nsprefix_ = None
        self.sendMove = sendMove
        self.sendMove_nsprefix_ = None
        if playerStatus is None:
            self.playerStatus = []
        else:
            self.playerStatus = playerStatus
        self.playerStatus_nsprefix_ = None
        if foundTreasures is None:
            self.foundTreasures = []
        else:
            self.foundTreasures = foundTreasures
        self.foundTreasures_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GameStatusData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GameStatusData.subclass:
            return GameStatusData.subclass(*args_, **kwargs_)
        else:
            return GameStatusData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_boardAfterMove(self):
        return self.boardAfterMove
    def set_boardAfterMove(self, boardAfterMove):
        self.boardAfterMove = boardAfterMove
    def get_treasureReached(self):
        return self.treasureReached
    def set_treasureReached(self, treasureReached):
        self.treasureReached = treasureReached
    def get_sendMove(self):
        return self.sendMove
    def set_sendMove(self, sendMove):
        self.sendMove = sendMove
    def get_playerStatus(self):
        return self.playerStatus
    def set_playerStatus(self, playerStatus):
        self.playerStatus = playerStatus
    def add_playerStatus(self, value):
        self.playerStatus.append(value)
    def insert_playerStatus_at(self, index, value):
        self.playerStatus.insert(index, value)
    def replace_playerStatus_at(self, index, value):
        self.playerStatus[index] = value
    def get_foundTreasures(self):
        return self.foundTreasures
    def set_foundTreasures(self, foundTreasures):
        self.foundTreasures = foundTreasures
    def add_foundTreasures(self, value):
        self.foundTreasures.append(value)
    def insert_foundTreasures_at(self, index, value):
        self.foundTreasures.insert(index, value)
    def replace_foundTreasures_at(self, index, value):
        self.foundTreasures[index] = value
    def get_playerId(self):
        return self.playerId
    def set_playerId(self, playerId):
        self.playerId = playerId
    def validate_Treasure(self, value):
        result = True
        # Validate type Treasure, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['Start01', 'Start02', 'Start03', 'Start04', 'sym01', 'sym02', 'sym03', 'sym04', 'sym05', 'sym06', 'sym07', 'sym08', 'sym09', 'sym10', 'sym11', 'sym12', 'sym13', 'sym14', 'sym15', 'sym16', 'sym17', 'sym18', 'sym19', 'sym20', 'sym21', 'sym22', 'sym23', 'sym24']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Treasure' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.boardAfterMove is not None or
            self.treasureReached is not None or
            self.sendMove is not None or
            self.playerStatus or
            self.foundTreasures
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GameStatusData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GameStatusData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GameStatusData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GameStatusData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GameStatusData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GameStatusData'):
        if self.playerId is not None and 'playerId' not in already_processed:
            already_processed.add('playerId')
            outfile.write(' playerId="%s"' % self.gds_format_integer(self.playerId, input_name='playerId'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GameStatusData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.boardAfterMove is not None:
            namespaceprefix_ = self.boardAfterMove_nsprefix_ + ':' if (UseCapturedNS_ and self.boardAfterMove_nsprefix_) else ''
            self.boardAfterMove.export(outfile, level, namespaceprefix_, namespacedef_='', name_='boardAfterMove', pretty_print=pretty_print)
        if self.treasureReached is not None:
            namespaceprefix_ = self.treasureReached_nsprefix_ + ':' if (UseCapturedNS_ and self.treasureReached_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%streasureReached>%s</%streasureReached>%s' % (namespaceprefix_ , self.gds_format_boolean(self.treasureReached, input_name='treasureReached'), namespaceprefix_ , eol_))
        if self.sendMove is not None:
            namespaceprefix_ = self.sendMove_nsprefix_ + ':' if (UseCapturedNS_ and self.sendMove_nsprefix_) else ''
            self.sendMove.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sendMove', pretty_print=pretty_print)
        for playerStatus_ in self.playerStatus:
            namespaceprefix_ = self.playerStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.playerStatus_nsprefix_) else ''
            playerStatus_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='playerStatus', pretty_print=pretty_print)
        for foundTreasures_ in self.foundTreasures:
            namespaceprefix_ = self.foundTreasures_nsprefix_ + ':' if (UseCapturedNS_ and self.foundTreasures_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfoundTreasures>%s</%sfoundTreasures>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(foundTreasures_), input_name='foundTreasures')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('playerId', node)
        if value is not None and 'playerId' not in already_processed:
            already_processed.add('playerId')
            self.playerId = self.gds_parse_integer(value, node, 'playerId')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'boardAfterMove':
            obj_ = BoardData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.boardAfterMove = obj_
            obj_.original_tagname_ = 'boardAfterMove'
        elif nodeName_ == 'treasureReached':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'treasureReached')
            ival_ = self.gds_validate_boolean(ival_, node, 'treasureReached')
            self.treasureReached = ival_
            self.treasureReached_nsprefix_ = child_.prefix
        elif nodeName_ == 'sendMove':
            obj_ = MoveMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sendMove = obj_
            obj_.original_tagname_ = 'sendMove'
        elif nodeName_ == 'playerStatus':
            obj_ = playerStatusType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.playerStatus.append(obj_)
            obj_.original_tagname_ = 'playerStatus'
        elif nodeName_ == 'foundTreasures':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'foundTreasures')
            value_ = self.gds_validate_string(value_, node, 'foundTreasures')
            self.foundTreasures.append(value_)
            self.foundTreasures_nsprefix_ = child_.prefix
            # validate type Treasure
            self.validate_Treasure(self.foundTreasures[-1])
# end class GameStatusData


class MoveInfoData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, playerId=None, boardAfterMove=None, treasureReached=None, sendMove=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.playerId = _cast(int, playerId)
        self.playerId_nsprefix_ = None
        self.boardAfterMove = boardAfterMove
        self.boardAfterMove_nsprefix_ = None
        self.treasureReached = treasureReached
        self.treasureReached_nsprefix_ = None
        self.sendMove = sendMove
        self.sendMove_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MoveInfoData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MoveInfoData.subclass:
            return MoveInfoData.subclass(*args_, **kwargs_)
        else:
            return MoveInfoData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_boardAfterMove(self):
        return self.boardAfterMove
    def set_boardAfterMove(self, boardAfterMove):
        self.boardAfterMove = boardAfterMove
    def get_treasureReached(self):
        return self.treasureReached
    def set_treasureReached(self, treasureReached):
        self.treasureReached = treasureReached
    def get_sendMove(self):
        return self.sendMove
    def set_sendMove(self, sendMove):
        self.sendMove = sendMove
    def get_playerId(self):
        return self.playerId
    def set_playerId(self, playerId):
        self.playerId = playerId
    def _hasContent(self):
        if (
            self.boardAfterMove is not None or
            self.treasureReached is not None or
            self.sendMove is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MoveInfoData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MoveInfoData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MoveInfoData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MoveInfoData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MoveInfoData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MoveInfoData'):
        if self.playerId is not None and 'playerId' not in already_processed:
            already_processed.add('playerId')
            outfile.write(' playerId="%s"' % self.gds_format_integer(self.playerId, input_name='playerId'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MoveInfoData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.boardAfterMove is not None:
            namespaceprefix_ = self.boardAfterMove_nsprefix_ + ':' if (UseCapturedNS_ and self.boardAfterMove_nsprefix_) else ''
            self.boardAfterMove.export(outfile, level, namespaceprefix_, namespacedef_='', name_='boardAfterMove', pretty_print=pretty_print)
        if self.treasureReached is not None:
            namespaceprefix_ = self.treasureReached_nsprefix_ + ':' if (UseCapturedNS_ and self.treasureReached_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%streasureReached>%s</%streasureReached>%s' % (namespaceprefix_ , self.gds_format_boolean(self.treasureReached, input_name='treasureReached'), namespaceprefix_ , eol_))
        if self.sendMove is not None:
            namespaceprefix_ = self.sendMove_nsprefix_ + ':' if (UseCapturedNS_ and self.sendMove_nsprefix_) else ''
            self.sendMove.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sendMove', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('playerId', node)
        if value is not None and 'playerId' not in already_processed:
            already_processed.add('playerId')
            self.playerId = self.gds_parse_integer(value, node, 'playerId')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'boardAfterMove':
            obj_ = BoardData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.boardAfterMove = obj_
            obj_.original_tagname_ = 'boardAfterMove'
        elif nodeName_ == 'treasureReached':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'treasureReached')
            ival_ = self.gds_validate_boolean(ival_, node, 'treasureReached')
            self.treasureReached = ival_
            self.treasureReached_nsprefix_ = child_.prefix
        elif nodeName_ == 'sendMove':
            obj_ = MoveMessageData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sendMove = obj_
            obj_.original_tagname_ = 'sendMove'
# end class MoveInfoData


class ControlServerData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, playerCount=None, command=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.playerCount = playerCount
        self.playerCount_nsprefix_ = None
        self.command = command
        self.validate_commandType(self.command)
        self.command_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ControlServerData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ControlServerData.subclass:
            return ControlServerData.subclass(*args_, **kwargs_)
        else:
            return ControlServerData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_playerCount(self):
        return self.playerCount
    def set_playerCount(self, playerCount):
        self.playerCount = playerCount
    def get_command(self):
        return self.command
    def set_command(self, command):
        self.command = command
    def validate_commandType(self, value):
        result = True
        # Validate type commandType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['START', 'STOP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on commandType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.playerCount is not None or
            self.command is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ControlServerData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ControlServerData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ControlServerData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ControlServerData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ControlServerData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ControlServerData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ControlServerData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.playerCount is not None:
            namespaceprefix_ = self.playerCount_nsprefix_ + ':' if (UseCapturedNS_ and self.playerCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splayerCount>%s</%splayerCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.playerCount, input_name='playerCount'), namespaceprefix_ , eol_))
        if self.command is not None:
            namespaceprefix_ = self.command_nsprefix_ + ':' if (UseCapturedNS_ and self.command_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scommand>%s</%scommand>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.command), input_name='command')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'playerCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'playerCount')
            ival_ = self.gds_validate_integer(ival_, node, 'playerCount')
            self.playerCount = ival_
            self.playerCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'command':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'command')
            value_ = self.gds_validate_string(value_, node, 'command')
            self.command = value_
            self.command_nsprefix_ = child_.prefix
            # validate type commandType
            self.validate_commandType(self.command)
# end class ControlServerData


class AcceptMessageData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, accept=None, errortypeCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.accept = accept
        self.accept_nsprefix_ = None
        self.errortypeCode = errortypeCode
        self.validate_Errortype(self.errortypeCode)
        self.errortypeCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AcceptMessageData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AcceptMessageData.subclass:
            return AcceptMessageData.subclass(*args_, **kwargs_)
        else:
            return AcceptMessageData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_accept(self):
        return self.accept
    def set_accept(self, accept):
        self.accept = accept
    def get_errortypeCode(self):
        return self.errortypeCode
    def set_errortypeCode(self, errortypeCode):
        self.errortypeCode = errortypeCode
    def validate_Errortype(self, value):
        result = True
        # Validate type Errortype, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NOERROR', 'ERROR', 'AWAIT_LOGIN', 'AWAIT_MOVE', 'ILLEGAL_MOVE', 'TIMEOUT', 'TOO_MANY_TRIES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Errortype' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.accept is not None or
            self.errortypeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AcceptMessageData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AcceptMessageData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AcceptMessageData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AcceptMessageData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AcceptMessageData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AcceptMessageData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AcceptMessageData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.accept is not None:
            namespaceprefix_ = self.accept_nsprefix_ + ':' if (UseCapturedNS_ and self.accept_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccept>%s</%saccept>%s' % (namespaceprefix_ , self.gds_format_boolean(self.accept, input_name='accept'), namespaceprefix_ , eol_))
        if self.errortypeCode is not None:
            namespaceprefix_ = self.errortypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errortypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrortypeCode>%s</%serrortypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errortypeCode), input_name='errortypeCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'accept':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'accept')
            ival_ = self.gds_validate_boolean(ival_, node, 'accept')
            self.accept = ival_
            self.accept_nsprefix_ = child_.prefix
        elif nodeName_ == 'errortypeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errortypeCode')
            value_ = self.gds_validate_string(value_, node, 'errortypeCode')
            self.errortypeCode = value_
            self.errortypeCode_nsprefix_ = child_.prefix
            # validate type Errortype
            self.validate_Errortype(self.errortypeCode)
# end class AcceptMessageData


class WinMessageData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, board=None, statistics=None, winner=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.board = board
        self.board_nsprefix_ = None
        if statistics is None:
            self.statistics = []
        else:
            self.statistics = statistics
        self.statistics_nsprefix_ = None
        self.winner = winner
        self.winner_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WinMessageData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WinMessageData.subclass:
            return WinMessageData.subclass(*args_, **kwargs_)
        else:
            return WinMessageData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_board(self):
        return self.board
    def set_board(self, board):
        self.board = board
    def get_statistics(self):
        return self.statistics
    def set_statistics(self, statistics):
        self.statistics = statistics
    def add_statistics(self, value):
        self.statistics.append(value)
    def insert_statistics_at(self, index, value):
        self.statistics.insert(index, value)
    def replace_statistics_at(self, index, value):
        self.statistics[index] = value
    def get_winner(self):
        return self.winner
    def set_winner(self, winner):
        self.winner = winner
    def _hasContent(self):
        if (
            self.board is not None or
            self.statistics or
            self.winner is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WinMessageData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WinMessageData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WinMessageData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WinMessageData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WinMessageData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WinMessageData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WinMessageData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.board is not None:
            namespaceprefix_ = self.board_nsprefix_ + ':' if (UseCapturedNS_ and self.board_nsprefix_) else ''
            self.board.export(outfile, level, namespaceprefix_, namespacedef_='', name_='board', pretty_print=pretty_print)
        for statistics_ in self.statistics:
            namespaceprefix_ = self.statistics_nsprefix_ + ':' if (UseCapturedNS_ and self.statistics_nsprefix_) else ''
            statistics_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='statistics', pretty_print=pretty_print)
        if self.winner is not None:
            namespaceprefix_ = self.winner_nsprefix_ + ':' if (UseCapturedNS_ and self.winner_nsprefix_) else ''
            self.winner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='winner', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'board':
            obj_ = BoardData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.board = obj_
            obj_.original_tagname_ = 'board'
        elif nodeName_ == 'statistics':
            obj_ = StatisticData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.statistics.append(obj_)
            obj_.original_tagname_ = 'statistics'
        elif nodeName_ == 'winner':
            obj_ = winnerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.winner = obj_
            obj_.original_tagname_ = 'winner'
# end class WinMessageData


class DisconnectMessageData(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, errortypeCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = name
        self.name_nsprefix_ = None
        self.errortypeCode = errortypeCode
        self.validate_Errortype(self.errortypeCode)
        self.errortypeCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DisconnectMessageData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DisconnectMessageData.subclass:
            return DisconnectMessageData.subclass(*args_, **kwargs_)
        else:
            return DisconnectMessageData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_errortypeCode(self):
        return self.errortypeCode
    def set_errortypeCode(self, errortypeCode):
        self.errortypeCode = errortypeCode
    def validate_Errortype(self, value):
        result = True
        # Validate type Errortype, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NOERROR', 'ERROR', 'AWAIT_LOGIN', 'AWAIT_MOVE', 'ILLEGAL_MOVE', 'TIMEOUT', 'TOO_MANY_TRIES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Errortype' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.name is not None or
            self.errortypeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DisconnectMessageData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DisconnectMessageData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DisconnectMessageData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DisconnectMessageData')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DisconnectMessageData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DisconnectMessageData'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DisconnectMessageData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            namespaceprefix_ = self.name_nsprefix_ + ':' if (UseCapturedNS_ and self.name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.errortypeCode is not None:
            namespaceprefix_ = self.errortypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errortypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrortypeCode>%s</%serrortypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errortypeCode), input_name='errortypeCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'name')
            value_ = self.gds_validate_string(value_, node, 'name')
            self.name = value_
            self.name_nsprefix_ = child_.prefix
        elif nodeName_ == 'errortypeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errortypeCode')
            value_ = self.gds_validate_string(value_, node, 'errortypeCode')
            self.errortypeCode = value_
            self.errortypeCode_nsprefix_ = child_.prefix
            # validate type Errortype
            self.validate_Errortype(self.errortypeCode)
# end class DisconnectMessageData


class Openings(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, top=None, bottom=None, left=None, right=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.top = top
        self.top_nsprefix_ = None
        self.bottom = bottom
        self.bottom_nsprefix_ = None
        self.left = left
        self.left_nsprefix_ = None
        self.right = right
        self.right_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Openings)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Openings.subclass:
            return Openings.subclass(*args_, **kwargs_)
        else:
            return Openings(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_top(self):
        return self.top
    def set_top(self, top):
        self.top = top
    def get_bottom(self):
        return self.bottom
    def set_bottom(self, bottom):
        self.bottom = bottom
    def get_left(self):
        return self.left
    def set_left(self, left):
        self.left = left
    def get_right(self):
        return self.right
    def set_right(self, right):
        self.right = right
    def _hasContent(self):
        if (
            self.top is not None or
            self.bottom is not None or
            self.left is not None or
            self.right is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Openings', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Openings')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Openings':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Openings')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Openings', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Openings'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Openings', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.top is not None:
            namespaceprefix_ = self.top_nsprefix_ + ':' if (UseCapturedNS_ and self.top_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stop>%s</%stop>%s' % (namespaceprefix_ , self.gds_format_boolean(self.top, input_name='top'), namespaceprefix_ , eol_))
        if self.bottom is not None:
            namespaceprefix_ = self.bottom_nsprefix_ + ':' if (UseCapturedNS_ and self.bottom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbottom>%s</%sbottom>%s' % (namespaceprefix_ , self.gds_format_boolean(self.bottom, input_name='bottom'), namespaceprefix_ , eol_))
        if self.left is not None:
            namespaceprefix_ = self.left_nsprefix_ + ':' if (UseCapturedNS_ and self.left_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sleft>%s</%sleft>%s' % (namespaceprefix_ , self.gds_format_boolean(self.left, input_name='left'), namespaceprefix_ , eol_))
        if self.right is not None:
            namespaceprefix_ = self.right_nsprefix_ + ':' if (UseCapturedNS_ and self.right_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sright>%s</%sright>%s' % (namespaceprefix_ , self.gds_format_boolean(self.right, input_name='right'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'top':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'top')
            ival_ = self.gds_validate_boolean(ival_, node, 'top')
            self.top = ival_
            self.top_nsprefix_ = child_.prefix
        elif nodeName_ == 'bottom':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'bottom')
            ival_ = self.gds_validate_boolean(ival_, node, 'bottom')
            self.bottom = ival_
            self.bottom_nsprefix_ = child_.prefix
        elif nodeName_ == 'left':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'left')
            ival_ = self.gds_validate_boolean(ival_, node, 'left')
            self.left = ival_
            self.left_nsprefix_ = child_.prefix
        elif nodeName_ == 'right':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'right')
            ival_ = self.gds_validate_boolean(ival_, node, 'right')
            self.right = ival_
            self.right_nsprefix_ = child_.prefix
# end class Openings


class Pin(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, playerID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if playerID is None:
            self.playerID = []
        else:
            self.playerID = playerID
        self.playerID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Pin)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Pin.subclass:
            return Pin.subclass(*args_, **kwargs_)
        else:
            return Pin(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_playerID(self):
        return self.playerID
    def set_playerID(self, playerID):
        self.playerID = playerID
    def add_playerID(self, value):
        self.playerID.append(value)
    def insert_playerID_at(self, index, value):
        self.playerID.insert(index, value)
    def replace_playerID_at(self, index, value):
        self.playerID[index] = value
    def _hasContent(self):
        if (
            self.playerID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Pin', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Pin')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Pin':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Pin')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Pin', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Pin'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Pin', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for playerID_ in self.playerID:
            namespaceprefix_ = self.playerID_nsprefix_ + ':' if (UseCapturedNS_ and self.playerID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splayerID>%s</%splayerID>%s' % (namespaceprefix_ , self.gds_format_integer(playerID_, input_name='playerID'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'playerID' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'playerID')
            ival_ = self.gds_validate_integer(ival_, node, 'playerID')
            self.playerID.append(ival_)
            self.playerID_nsprefix_ = child_.prefix
# end class Pin


class Row(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, col=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if col is None:
            self.col = []
        else:
            self.col = col
        self.col_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Row)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Row.subclass:
            return Row.subclass(*args_, **kwargs_)
        else:
            return Row(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_col(self):
        if (self.col == None):
            self.col = []     
        return self.col
    def set_col(self, col):
        self.col = col
    def add_col(self, value):
        self.col.append(value)
    def insert_col_at(self, index, value):
        self.col.insert(index, value)
    def replace_col_at(self, index, value):
        self.col[index] = value
    def _hasContent(self):
        if (
            self.col
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Row', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Row')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Row':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Row')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Row', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Row'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Row', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for col_ in self.col:
            namespaceprefix_ = self.col_nsprefix_ + ':' if (UseCapturedNS_ and self.col_nsprefix_) else ''
            col_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='col', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'col':
            obj_ = CardData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.col.append(obj_)
            obj_.original_tagname_ = 'col'
# end class Row


class playerStatusType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, playerID=None, playerName=None, currentTreasure=None, treasures=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.playerID = playerID
        self.playerID_nsprefix_ = None
        self.playerName = playerName
        self.playerName_nsprefix_ = None
        self.currentTreasure = currentTreasure
        self.validate_Treasure(self.currentTreasure)
        self.currentTreasure_nsprefix_ = None
        if treasures is None:
            self.treasures = []
        else:
            self.treasures = treasures
        self.treasures_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, playerStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if playerStatusType.subclass:
            return playerStatusType.subclass(*args_, **kwargs_)
        else:
            return playerStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_playerID(self):
        return self.playerID
    def set_playerID(self, playerID):
        self.playerID = playerID
    def get_playerName(self):
        return self.playerName
    def set_playerName(self, playerName):
        self.playerName = playerName
    def get_currentTreasure(self):
        return self.currentTreasure
    def set_currentTreasure(self, currentTreasure):
        self.currentTreasure = currentTreasure
    def get_treasures(self):
        return self.treasures
    def set_treasures(self, treasures):
        self.treasures = treasures
    def add_treasures(self, value):
        self.treasures.append(value)
    def insert_treasures_at(self, index, value):
        self.treasures.insert(index, value)
    def replace_treasures_at(self, index, value):
        self.treasures[index] = value
    def validate_Treasure(self, value):
        result = True
        # Validate type Treasure, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['Start01', 'Start02', 'Start03', 'Start04', 'sym01', 'sym02', 'sym03', 'sym04', 'sym05', 'sym06', 'sym07', 'sym08', 'sym09', 'sym10', 'sym11', 'sym12', 'sym13', 'sym14', 'sym15', 'sym16', 'sym17', 'sym18', 'sym19', 'sym20', 'sym21', 'sym22', 'sym23', 'sym24']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Treasure' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def _hasContent(self):
        if (
            self.playerID is not None or
            self.playerName is not None or
            self.currentTreasure is not None or
            self.treasures
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='playerStatusType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('playerStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'playerStatusType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='playerStatusType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='playerStatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='playerStatusType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='playerStatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.playerID is not None:
            namespaceprefix_ = self.playerID_nsprefix_ + ':' if (UseCapturedNS_ and self.playerID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splayerID>%s</%splayerID>%s' % (namespaceprefix_ , self.gds_format_integer(self.playerID, input_name='playerID'), namespaceprefix_ , eol_))
        if self.playerName is not None:
            namespaceprefix_ = self.playerName_nsprefix_ + ':' if (UseCapturedNS_ and self.playerName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splayerName>%s</%splayerName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.playerName), input_name='playerName')), namespaceprefix_ , eol_))
        if self.currentTreasure is not None:
            namespaceprefix_ = self.currentTreasure_nsprefix_ + ':' if (UseCapturedNS_ and self.currentTreasure_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrentTreasure>%s</%scurrentTreasure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.currentTreasure), input_name='currentTreasure')), namespaceprefix_ , eol_))
        for treasures_ in self.treasures:
            namespaceprefix_ = self.treasures_nsprefix_ + ':' if (UseCapturedNS_ and self.treasures_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%streasures>%s</%streasures>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(treasures_), input_name='treasures')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'playerID' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'playerID')
            ival_ = self.gds_validate_integer(ival_, node, 'playerID')
            self.playerID = ival_
            self.playerID_nsprefix_ = child_.prefix
        elif nodeName_ == 'playerName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'playerName')
            value_ = self.gds_validate_string(value_, node, 'playerName')
            self.playerName = value_
            self.playerName_nsprefix_ = child_.prefix
        elif nodeName_ == 'currentTreasure':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'currentTreasure')
            value_ = self.gds_validate_string(value_, node, 'currentTreasure')
            self.currentTreasure = value_
            self.currentTreasure_nsprefix_ = child_.prefix
            # validate type Treasure
            self.validate_Treasure(self.currentTreasure)
        elif nodeName_ == 'treasures':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'treasures')
            value_ = self.gds_validate_string(value_, node, 'treasures')
            self.treasures.append(value_)
            self.treasures_nsprefix_ = child_.prefix
            # validate type Treasure
            self.validate_Treasure(self.treasures[-1])
# end class playerStatusType


class winnerType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.id = _cast(int, id)
        self.id_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, winnerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if winnerType.subclass:
            return winnerType.subclass(*args_, **kwargs_)
        else:
            return winnerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def _hasContent(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='winnerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('winnerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'winnerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='winnerType')
        if self._hasContent():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='winnerType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='winnerType'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='winnerType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = self.gds_parse_integer(value, node, 'id')
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class winnerType

class ObjectFactory:
    def __init__(self):
        pass

    def createBoardData(self):
        return BoardData()

    def createCardData(self):
        return CardData()
    
    def createMoveMessageData(self):
        return MoveMessageData()

    def createMazeCom(self):
        return MazeCom()

    def createLoginMessageData(self):
        return LoginMessageData()
    

GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CardData'
        rootClass = CardData
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CardData'
        rootClass = CardData
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CardData'
        rootClass = CardData
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CardData'
        rootClass = CardData
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from mazeCom import *\n\n')
        sys.stdout.write('import mazeCom as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {}

__all__ = [
    "AcceptMessageData",
    "AwaitMoveMessageData",
    "BoardData",
    "CardData",
    "ControlServerData",
    "DisconnectMessageData",
    "GameStatusData",
    "LoginMessageData",
    "LoginReplyMessageData",
    "MazeCom",
    "MoveInfoData",
    "MoveMessageData",
    "PositionData",
    "StatisticData",
    "TreasuresToGoData",
    "WinMessageData",
    "Openings",
    "Pin",
    "playerStatusType",
    "Row",
    "winnerType"
]
